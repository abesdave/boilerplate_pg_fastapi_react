"""generate device datbaase schemas

Revision ID: d7552cd83390
Revises: 
Create Date: 2024-04-01 11:15:43.604625

"""
import datetime
import json
import os
from typing import Any
from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlmodel import insert

from app.models import Device, DeviceData


# revision identifiers, used by Alembic.
revision = 'd7552cd83390'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    device_table = op.create_table('device',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_device_name'), 'device', ['name'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    device_data_table = op.create_table('devicedata',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('parameter', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('value', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('device_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['device.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
        
    if(os.getenv("ENV", None)) == "dev":
        seed("./alembic/versions/d7552cd83390.json", device_table, device_data_table)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('devicedata')
    op.drop_table('user')
    op.drop_index(op.f('ix_device_name'), table_name='device')
    op.drop_table('device')
    # ### end Alembic commands ###
    
def seed(file, device_table, device_data_table):
    with open(file) as file:
        sample_json = json.load(file)

    device_index = 1
    device_data_index = 1
    
    for device, entries in sample_json.items():
        device_name = device.split('.')[1]
        device = {
            "id": device_index,
            "name": device_name
        }
        op.bulk_insert(device_table, [
            device
        ])
        
        device_data_entries: list[dict] = []
        for entry in entries:
            device_data_entries.append(
                {
                "id": device_data_index,
                "parameter": entry["parameter"],
                "timestamp": datetime.datetime.fromisoformat(entry["timestamp"]).replace(tzinfo=None),
                "value": str(entry["value"]),
                "type": str(entry["type"]),
                "device_id": device_index
            })
            device_data_index += 1
        op.bulk_insert(device_data_table, device_data_entries)
        
        device_index+=1
